#!/bin/bash

# Usage: ./spit_test_analysis.sh <path-to-java-project>

PROJECT_DIR=$1
REPORT="spit-test-structure-report.md"

if [ -z "$PROJECT_DIR" ]; then
  echo "Usage: $0 <path-to-java-project>"
  exit 1
fi

cd "$PROJECT_DIR" || { echo "Invalid project directory: $PROJECT_DIR"; exit 1; }

echo "# SPIT Test Structure Report" > "$REPORT"
echo "Project scanned: \`$PROJECT_DIR\`" >> "$REPORT"
echo "" >> "$REPORT"

# Count of test classes
echo "## Test Class Count" >> "$REPORT"
TEST_CLASS_COUNT=$(find . -type f -name "*Test.java" | wc -l)
echo "- Total test classes: $TEST_CLASS_COUNT" >> "$REPORT"
echo "" >> "$REPORT"

# Count test methods and assertion usage
echo "## Test Classes Missing Assertions" >> "$REPORT"
find . -name "*Test.java" -exec grep -L "assert" {} \; | sed 's/^/- /' >> "$REPORT"
echo "" >> "$REPORT"

# List test classes with too many or too few test methods
echo "## Test Method Counts" >> "$REPORT"
find . -name "*Test.java" | while read file; do
  TEST_METHODS=$(grep -E '@Test|@ParameterizedTest' "$file" | wc -l)
  if [ "$TEST_METHODS" -gt 10 ]; then
    echo "- $file has $TEST_METHODS test methods (consider splitting)" >> "$REPORT"
  elif [ "$TEST_METHODS" -eq 0 ]; then
    echo "- $file has NO test methods!" >> "$REPORT"
  fi
done >> "$REPORT"
echo "" >> "$REPORT"

# Orphaned classes (no matching test)
echo "## Classes with No Matching Test" >> "$REPORT"
for src in $(find ./src/main/java -name "*.java"); do
  base=$(basename "$src" .java)
  test_match=$(find ./src/test/java -name "${base}Test.java")
  if [ -z "$test_match" ]; then
    echo "- $(basename "$src") has no test class" >> "$REPORT"
  fi
done
echo "" >> "$REPORT"

echo "_Generated by SPIT Test Structure Analyzer_" >> "$REPORT"
echo "Test structure report generated: $REPORT"
